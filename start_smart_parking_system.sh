#!/bin/bash

# Smart Parking System Startup Script
# Kh·ªüi ƒë·ªông to√†n b·ªô h·ªá th·ªëng b√£i g·ª≠i xe th√¥ng minh

echo "üöó Smart Parking System Startup"
echo "================================"

# Ki·ªÉm tra Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    echo "üí° Vui l√≤ng c√†i ƒë·∫∑t Node.js tr∆∞·ªõc"
    exit 1
fi

# Ki·ªÉm tra Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    echo "üí° Vui l√≤ng c√†i ƒë·∫∑t Python3 tr∆∞·ªõc"
    exit 1
fi

# Ki·ªÉm tra MongoDB
if ! command -v mongod &> /dev/null; then
    echo "‚ö†Ô∏è  MongoDB kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    echo "üí° Vui l√≤ng c√†i ƒë·∫∑t MongoDB ho·∫∑c s·ª≠ d·ª•ng MongoDB Atlas"
fi

echo "‚úÖ Prerequisites check completed"

# Kh·ªüi ƒë·ªông MongoDB (n·∫øu c√≥)
if command -v mongod &> /dev/null; then
    echo "üîÑ Starting MongoDB..."
    mongod --fork --logpath /tmp/mongod.log
    sleep 2
    echo "‚úÖ MongoDB started"
fi

# Kh·ªüi ƒë·ªông Smart Parking Server
echo "üîÑ Starting Smart Parking Server..."
cd server
npm install
npm start &
SERVER_PID=$!
cd ..

# ƒê·ª£i server kh·ªüi ƒë·ªông
echo "‚è≥ Waiting for server to start..."
sleep 5

# Ki·ªÉm tra server health
echo "üîç Checking server health..."
for i in {1..10}; do
    if curl -s http://localhost:5000/api/health > /dev/null; then
        echo "‚úÖ Smart Parking Server is running"
        break
    else
        echo "‚è≥ Waiting for server... ($i/10)"
        sleep 2
    fi
done

# Kh·ªüi ƒë·ªông ALPR Service
echo "üîÑ Starting ALPR Service..."
cd alpr_service_simple

# C√†i ƒë·∫∑t dependencies n·∫øu c·∫ßn
if [ ! -d "venv" ]; then
    echo "üì¶ Installing ALPR dependencies..."
    python3 -m venv venv
    source venv/bin/activate
    pip install -r requirements.txt
else
    source venv/bin/activate
fi

# Kh·ªüi ƒë·ªông ALPR service
python3 alpr_integration.py &
ALPR_PID=$!
cd ..

# ƒê·ª£i ALPR service kh·ªüi ƒë·ªông
echo "‚è≥ Waiting for ALPR service to start..."
sleep 3

# Ki·ªÉm tra ALPR service health
echo "üîç Checking ALPR service health..."
for i in {1..5}; do
    if curl -s http://localhost:5001/health > /dev/null; then
        echo "‚úÖ ALPR Service is running"
        break
    else
        echo "‚è≥ Waiting for ALPR service... ($i/5)"
        sleep 2
    fi
done

# Ch·∫°y test t√≠ch h·ª£p
echo "üß™ Running integration test..."
cd alpr_service_simple
python3 test_integration.py
cd ..

echo ""
echo "üéâ Smart Parking System Started Successfully!"
echo "============================================="
echo "üìç Smart Parking Server: http://localhost:8080"
echo "üîç ALPR Service: http://localhost:5001"
echo "üì± Health Checks:"
echo "   - Server: curl http://localhost:8080/api/health"
echo "   - ALPR: curl http://localhost:5001/health"
echo ""
echo "üõë To stop the system, press Ctrl+C"

# Function ƒë·ªÉ cleanup khi tho√°t
cleanup() {
    echo ""
    echo "üõë Shutting down Smart Parking System..."
    
    # Kill ALPR service
    if [ ! -z "$ALPR_PID" ]; then
        kill $ALPR_PID 2>/dev/null
        echo "‚úÖ ALPR Service stopped"
    fi
    
    # Kill server
    if [ ! -z "$SERVER_PID" ]; then
        kill $SERVER_PID 2>/dev/null
        echo "‚úÖ Smart Parking Server stopped"
    fi
    
    # Stop MongoDB
    if command -v mongod &> /dev/null; then
        pkill mongod 2>/dev/null
        echo "‚úÖ MongoDB stopped"
    fi
    
    echo "üëã Smart Parking System stopped"
    exit 0
}

# Trap Ctrl+C
trap cleanup SIGINT

# Gi·ªØ script ch·∫°y
echo "üîÑ System is running... Press Ctrl+C to stop"
while true; do
    sleep 10
    
    # Ki·ªÉm tra health ƒë·ªãnh k·ª≥
    if ! curl -s http://localhost:5000/api/health > /dev/null; then
        echo "‚ö†Ô∏è  Smart Parking Server is down!"
    fi
    
    if ! curl -s http://localhost:5001/health > /dev/null; then
        echo "‚ö†Ô∏è  ALPR Service is down!"
    fi
done 